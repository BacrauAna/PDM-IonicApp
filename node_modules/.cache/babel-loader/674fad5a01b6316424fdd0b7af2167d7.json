{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { Plugins } from \"@capacitor/core\";\nconst {\n  Network\n} = Plugins;\nconst initialState = {\n  connected: false\n};\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState);\n  useEffect(() => {\n    const handler = Network.addListener(\"networkStatusChange\", handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    };\n\n    function handleNetworkStatusChange(status) {\n      if (!canceled) {\n        setNetworkStatus(status);\n      }\n    }\n  }, []);\n  return {\n    networkStatus\n  };\n};","map":{"version":3,"sources":["C:/Users/Anisoara Bacrau/Desktop/an3/PDM/ionic/PDM-IonicApp/src/utils/useNetwork.tsx"],"names":["useEffect","useState","Plugins","Network","initialState","connected","useNetwork","networkStatus","setNetworkStatus","handler","addListener","handleNetworkStatusChange","getStatus","then","canceled","remove","status"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAAwBC,OAAxB,QAAuC,iBAAvC;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAApB;AAEA,MAAME,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AADM,CAArB;AAIA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAACG,YAAD,CAAlD;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,OAAO,GAAGN,OAAO,CAACO,WAAR,CAAoB,qBAApB,EAA2CC,yBAA3C,CAAhB;AACAR,IAAAA,OAAO,CAACS,SAAR,GAAoBC,IAApB,CAAyBF,yBAAzB;AACA,QAAIG,QAAQ,GAAG,KAAf;AACA,WAAO,MAAM;AACTA,MAAAA,QAAQ,GAAG,IAAX;AACAL,MAAAA,OAAO,CAACM,MAAR;AACH,KAHD;;AAKA,aAASJ,yBAAT,CAAmCK,MAAnC,EAA0D;AACtD,UAAI,CAACF,QAAL,EAAe;AACXN,QAAAA,gBAAgB,CAACQ,MAAD,CAAhB;AACH;AACJ;AACJ,GAdQ,EAcN,EAdM,CAAT;AAeA,SAAO;AAAET,IAAAA;AAAF,GAAP;AACH,CAlBM","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport { NetworkStatus, Plugins } from \"@capacitor/core\";\r\nconst { Network } = Plugins;\r\n\r\nconst initialState = {\r\n    connected: false,\r\n};\r\n\r\nexport const useNetwork = () => {\r\n    const [networkStatus, setNetworkStatus] = useState(initialState);\r\n    useEffect(() => {\r\n        const handler = Network.addListener(\"networkStatusChange\", handleNetworkStatusChange);\r\n        Network.getStatus().then(handleNetworkStatusChange);\r\n        let canceled = false;\r\n        return () => {\r\n            canceled = true;\r\n            handler.remove();\r\n        };\r\n\r\n        function handleNetworkStatusChange(status: NetworkStatus) {\r\n            if (!canceled) {\r\n                setNetworkStatus(status);\r\n            }\r\n        }\r\n    }, []);\r\n    return { networkStatus };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}