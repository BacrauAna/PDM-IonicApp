{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anisoara Bacrau\\\\Desktop\\\\an3\\\\PDM\\\\ionic\\\\PDM-IonicApp\\\\src\\\\auth\\\\PrivateRoute.tsx\";\nimport React, { useContext } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { AuthContext } from './AuthProvider';\nimport { getLogger } from '../core';\nconst log = getLogger('Login');\nexport const PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  log('render, isAuthenticated', isAuthenticated);\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => {\n      if (isAuthenticated) {\n        // @ts-ignore\n        return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 24\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: '/login'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 20\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["C:/Users/Anisoara Bacrau/Desktop/an3/PDM/ionic/PDM-IonicApp/src/auth/PrivateRoute.tsx"],"names":["React","useContext","Redirect","Route","AuthContext","getLogger","log","PrivateRoute","component","Component","rest","isAuthenticated","props","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAAuC,gBAAvC;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,MAAMC,GAAG,GAAGD,SAAS,CAAC,OAAD,CAArB;AAQA,OAAO,MAAME,YAAyC,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC5F,QAAM;AAAEC,IAAAA;AAAF,MAAsBV,UAAU,CAAYG,WAAZ,CAAtC;AACAE,EAAAA,GAAG,CAAC,yBAAD,EAA4BK,eAA5B,CAAH;AACA,sBACI,oBAAC,KAAD,oBAAWD,IAAX;AAAiB,IAAA,MAAM,EAAEE,KAAK,IAAI;AAC9B,UAAID,eAAJ,EAAqB;AACjB;AACA,4BAAO,oBAAC,SAAD,oBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACH;;AACD,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AASH,CAZM","sourcesContent":["import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { AuthContext, AuthState } from './AuthProvider';\r\nimport { getLogger } from '../core';\r\n\r\nconst log = getLogger('Login');\r\n\r\nexport interface PrivateRouteProps {\r\n    component: PropTypes.ReactNodeLike;\r\n    path: string;\r\n    exact?: boolean;\r\n}\r\n\r\nexport const PrivateRoute: React.FC<PrivateRouteProps> = ({ component: Component, ...rest }) => {\r\n    const { isAuthenticated } = useContext<AuthState>(AuthContext);\r\n    log('render, isAuthenticated', isAuthenticated);\r\n    return (\r\n        <Route {...rest} render={props => {\r\n            if (isAuthenticated) {\r\n                // @ts-ignore\r\n                return <Component {...props} />;\r\n            }\r\n            return <Redirect to={{ pathname: '/login' }}/>\r\n        }}/>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}