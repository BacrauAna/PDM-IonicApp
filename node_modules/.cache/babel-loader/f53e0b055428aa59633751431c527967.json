{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anisoara Bacrau\\\\Desktop\\\\an3\\\\PDM\\\\ionic\\\\PDM-IonicApp\\\\src\\\\auth\\\\AuthProvider.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getLogger } from '../core';\nimport { login as loginApi } from './authApi';\nimport { Plugins } from \"@capacitor/core\";\nconst {\n  Storage\n} = Plugins;\nconst log = getLogger('AuthProvider');\nconst initialState = {\n  isAuthenticated: false,\n  isAuthenticating: false,\n  authenticationError: null,\n  pendingAuthentication: false,\n  token: ''\n};\nexport const AuthContext = React.createContext(initialState);\nexport const AuthProvider = ({\n  children\n}) => {\n  const [state, setState] = useState(initialState);\n  const {\n    isAuthenticated,\n    isAuthenticating,\n    authenticationError,\n    pendingAuthentication,\n    token\n  } = state;\n  const login = useCallback(loginCallback, []);\n  const logout = useCallback(logoutCallback, []);\n  useEffect(authenticationEffect, [pendingAuthentication]);\n  const value = {\n    isAuthenticated,\n    login,\n    logout,\n    isAuthenticating,\n    authenticationError,\n    token\n  };\n  log('render');\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, children);\n\n  function loginCallback(username, password) {\n    log('login');\n    setState({ ...state,\n      pendingAuthentication: true,\n      username,\n      password\n    });\n  }\n\n  function logoutCallback() {\n    log(\"logout\");\n    setState({ ...state,\n      isAuthenticated: false,\n      token: \"\"\n    });\n\n    (async () => {\n      await Storage.remove({\n        key: \"user\"\n      });\n    })();\n  }\n\n  function authenticationEffect() {\n    let canceled = false;\n    authenticate();\n    return () => {\n      canceled = true;\n    };\n\n    async function authenticate() {\n      var tokenStorage = await Storage.get({\n        key: \"user\"\n      });\n      console.log(\"token \" + tokenStorage.value);\n\n      if (tokenStorage.value) {\n        setState({ ...state,\n          token: tokenStorage.value,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false\n        });\n      }\n\n      if (!pendingAuthentication) {\n        log('authenticate, !pendingAuthentication, return');\n        return;\n      }\n\n      try {\n        log('authenticate...');\n        setState({ ...state,\n          isAuthenticating: true\n        });\n        const {\n          username,\n          password\n        } = state;\n        const {\n          token\n        } = await loginApi(username, password);\n        console.log(\"token: \" + token);\n        Storage.set({\n          key: 'token',\n          value: token\n        });\n\n        if (canceled) {\n          return;\n        }\n\n        log('authenticate succeeded');\n        await Storage.set({\n          key: \"user\",\n          value: token\n        });\n        setState({ ...state,\n          token,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false\n        });\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n\n        log('authenticate failed');\n        setState({ ...state,\n          authenticationError: error,\n          pendingAuthentication: false,\n          isAuthenticating: false\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Anisoara Bacrau/Desktop/an3/PDM/ionic/PDM-IonicApp/src/auth/AuthProvider.tsx"],"names":["React","useCallback","useEffect","useState","getLogger","login","loginApi","Plugins","Storage","log","initialState","isAuthenticated","isAuthenticating","authenticationError","pendingAuthentication","token","AuthContext","createContext","AuthProvider","children","state","setState","loginCallback","logout","logoutCallback","authenticationEffect","value","username","password","remove","key","canceled","authenticate","tokenStorage","get","console","set","error"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getLogger } from '../core';\nimport { login as loginApi } from './authApi';\nimport { Plugins } from \"@capacitor/core\";\n\nconst { Storage } = Plugins;\n\nconst log = getLogger('AuthProvider');\n\ntype LoginFn = (username?: string, password?: string) => void;\ntype LogoutFn = () => void;\n\nexport interface AuthState {\n  authenticationError: Error | null;\n  isAuthenticated: boolean;\n  isAuthenticating: boolean;\n  login?: LoginFn;\n  logout?: LogoutFn;\n  pendingAuthentication?: boolean;\n  username?: string;\n  password?: string;\n  token: string;\n}\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  isAuthenticating: false,\n  authenticationError: null,\n  pendingAuthentication: false,\n  token: '',\n};\n\nexport const AuthContext = React.createContext<AuthState>(initialState);\n\ninterface AuthProviderProps {\n  children: PropTypes.ReactNodeLike,\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [state, setState] = useState<AuthState>(initialState);\n  const { isAuthenticated, isAuthenticating, authenticationError, pendingAuthentication, token } = state;\n  const login = useCallback<LoginFn>(loginCallback, []);\n  const logout = useCallback<LogoutFn>(logoutCallback, []);\n  useEffect(authenticationEffect, [pendingAuthentication]);\n  const value = { isAuthenticated, login,logout, isAuthenticating, authenticationError, token };\n  log('render');\n  return (\n      <AuthContext.Provider value={value}>\n        {children}\n      </AuthContext.Provider>\n  );\n\n  function loginCallback(username?: string, password?: string): void {\n    log('login');\n    setState({\n      ...state,\n      pendingAuthentication: true,\n      username,\n      password\n    });\n  }\n  function logoutCallback(): void {\n    log(\"logout\");\n    setState({\n      ...state,\n      isAuthenticated: false,\n      token: \"\",\n    });\n    (async () => {\n      await Storage.remove({ key: \"user\" });\n    })();\n  }\n\n  function authenticationEffect() {\n    let canceled = false;\n    authenticate();\n    return () => {\n      canceled = true;\n    }\n\n    async function authenticate() {\n      var tokenStorage = await Storage.get({ key: \"user\" });\n      console.log(\"token \"+tokenStorage.value);\n      if (tokenStorage.value) {\n        setState({\n          ...state,\n          token: tokenStorage.value,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false,\n        });\n      }\n      if (!pendingAuthentication) {\n        log('authenticate, !pendingAuthentication, return');\n        return;\n      }\n      try {\n        log('authenticate...');\n        setState({\n          ...state,\n          isAuthenticating: true,\n        });\n        const { username, password } = state;\n        const { token } = await loginApi(username, password);\n        console.log(\"token: \"+token);\n        Storage.set({key:'token',value:token});\n        if (canceled) {\n          return;\n        }\n        log('authenticate succeeded');\n        await Storage.set({ key: \"user\", value: token });\n        setState({\n          ...state,\n          token,\n          pendingAuthentication: false,\n          isAuthenticated: true,\n          isAuthenticating: false,\n        });\n      } catch (error) {\n        if (canceled) {\n          return;\n        }\n        log('authenticate failed');\n        setState({\n          ...state,\n          authenticationError: error,\n          pendingAuthentication: false,\n          isAuthenticating: false,\n        });\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}